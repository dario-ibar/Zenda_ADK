# Actualizar #FunctionTools.txt
new_doc_content = '''# FunctionTools de Zenda (ADK Objects)

## Estado: Convertidas a FunctionTool ADK (✅ Completado)

Todas las herramientas están implementadas como FunctionTool objects de ADK, no como funciones Python simples.

### Listado de FunctionTools:

**bitacora_tool** → Registra eventos clave (mensajes, acciones de agentes, detección de emociones, etc.) en la bitácora de la sesión. Es para la trazabilidad y auditoría. Usa BitacoraModel para estructura de datos.

**emotion_detection_tool** → Detecta emociones y tono del input del cliente (texto/audio) usando Gemini multimodal. Es para que Zenda adapte su respuesta emocionalmente. Incluye nivel de confianza del modelo.

**entidades_tool** → Gestiona entidades (personas, organizaciones, jerga, conceptos) en la base de datos con operaciones CRUD completas. Es para que Zenda recuerde relaciones y contexto específico del cliente. Usa EntidadModel.

**save_context_info_tool** → Guarda información específica o recurrente como entidades tipo "Jargon" o "Concepto". Es una forma especializada de crear entidades automáticamente desde el contexto conversacional.

**retrieve_client_data_tool** → Recupera datos esenciales del cliente (preferencias, resumen_memoria_larga, entidades iniciales) desde múltiples tablas de Supabase. Es para que DT prepare el contexto inicial de la sesión.

**save_qa_report_tool** → Guarda el reporte de auditoría del Agente QA en la tabla qa con métricas detalladas de adherencia y efectividad. Incluye detección de violaciones de guardrails y alarmas de seguridad.

**update_session_summary_tool** → Actualiza el resumen_memoria_larga de la sesión en la base de datos con validación de calidad automática. Es para la memoria a largo plazo de Zenda.

### Arquitectura ADK:
- Todas implementadas con `FunctionTool(function_name)`
- Docstrings completos para que LLM entienda cuándo usarlas
- Type hints para parámetros y returns
- Integración con modelos Pydantic (schemas)
- Logging estructurado para debugging
- TODO comments para conexión real a Supabase

### Próximos pasos:
1. Conectar con Supabase real (reemplazar simulaciones)
2. Integrar con ADK Runner
3. Testing de integración completa
'''

with open('/home/jupyter/Zenda_ADK/tools/#FunctionTools.txt', 'w') as f:
    f.write(new_doc_content)
    
print("✅ #FunctionTools.txt actualizado para reflejar conversión a ADK!")